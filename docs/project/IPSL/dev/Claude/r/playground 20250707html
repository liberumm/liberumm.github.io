<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>店舗シフト申込フォーム</title>
  <!-- Roboto & MUI -->
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" />
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/icon?family=Material+Icons" />
  <!-- React, ReactDOM, Babel -->
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js" crossorigin></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js" crossorigin></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.23.8/babel.min.js"></script>
  <!-- Emotion (MUI依存) -->
  <script
    src="https://cdn.jsdelivr.net/npm/@emotion/react@11.11.3/dist/emotion-react.umd.min.js"></script>
  <script
    src="https://cdn.jsdelivr.net/npm/@emotion/styled@11.11.0/dist/emotion-styled.umd.min.js"></script>
  <!-- MUI Core -->
  <script
    src="https://cdn.jsdelivr.net/npm/@mui/material@5.15.3/umd/material-ui.production.min.js"
    crossorigin></script>
  <style>
    body {
      font-family: Roboto, sans-serif;
      background-color: #f5f5f5;
      margin: 0;
      padding: 12px;
    }
    .form-container {
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }
    .form-header {
      background: linear-gradient(135deg, #1976d2 0%, #1565c0 100%);
      color: white;
      padding: 20px;
      text-align: center;
    }
    .form-section {
      padding: 16px 20px;
      border-bottom: 1px solid #e0e0e0;
    }
    .form-section:last-child {
      border-bottom: none;
    }
    .section-title {
      color: #1976d2;
      font-weight: 500;
      margin-bottom: 12px;
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 1.1rem;
    }
    .results-section {
      background-color: #f8f9fa;
      padding: 16px 20px;
    }
    .compact-card {
      background: #f8f9fa;
      border: 1px solid #e0e0e0;
      border-radius: 6px;
      padding: 12px;
      margin-bottom: 8px;
    }
  </style>
</head>
<body>
  <div id="root"></div>

  <script type="text/babel">
    const {
      Button,
      TextField,
      Select,
      MenuItem,
      FormControl,
      InputLabel,
      List,
      ListItem,
      Typography,
      Box,
      Grid,
      Paper,
      Divider,
      Card,
      CardContent,
      Icon
    } = MaterialUI;

    function App() {
      // 日付のステート
      const [startDate, setStartDate] = React.useState('');
      const [endDate, setEndDate]   = React.useState('');
      // 時刻のステート（初期値を 10:00 / 15:00 に設定）
      const [startTime, setStartTime] = React.useState('10:00');
      const [endTime,   setEndTime]   = React.useState('15:00');
      // 店舗×人数×振替のステート（３つ固定）
      const [stores, setStores] = React.useState([
        { name: '', count: '', transfer: '' },
        { name: '', count: '', transfer: '' },
        { name: '', count: '', transfer: '' }
      ]);
      // 生成リストのステート
      const [entries, setEntries] = React.useState([]);

      // 店舗情報の変更ハンドラ
      const handleStoreChange = (idx, field, value) => {
        const newStores = [...stores];
        newStores[idx][field] = value;
        setStores(newStores);
      };

      // 振替選択肢：自店を除いた他の店舗名リスト
      const getTransferOptions = (idx) => {
        return stores
          .map(s => s.name)
          .filter((_, i) => i !== idx && stores[i].name);
      };

      const generateEntries = () => {
        // 必須入力チェック
        if (!startDate || !endDate || !startTime || !endTime) return;
        for (let s of stores) {
          if (!s.name || !s.count || !s.transfer) return;
        }
        // 時刻バリデーション
        const [sh, sm] = startTime.split(':').map(Number);
        const [eh, em] = endTime.split(':').map(Number);
        if (sh > eh || (sh === eh && sm >= em)) {
          alert('開始時刻は終了時刻より前にしてください');
          return;
        }
        // 日付バリデーション
        const sDate = new Date(startDate);
        const eDate = new Date(endDate);
        if (sDate > eDate) {
          alert('開始日は終了日より前にしてください');
          return;
        }

        // ループ生成：日付×３店舗
        const list = [];
        for (let d = new Date(sDate); d <= eDate; d.setDate(d.getDate() + 1)) {
          const day = new Date(d).toISOString().slice(0,10);
          stores.forEach(({ name, count, transfer }) => {
            list.push({ date: day, startTime, endTime, store: name, count, transfer });
          });
        }
        setEntries(list);
      };

      // 生成ボタンの有効化判定
      const canGenerate =
        startDate && endDate && startTime && endTime &&
        stores.every(s => s.name && s.count && s.transfer);

      return (
        <Box sx={{ maxWidth: 900, mx: 'auto' }}>
          <div className="form-container">
            {/* フォームヘッダー */}
            <div className="form-header">
              <Typography variant="h5" component="h1" sx={{ fontWeight: 'bold', mb: 0.5 }}>
                店舗シフト申込フォーム
              </Typography>
              <Typography variant="body2" sx={{ opacity: 0.9 }}>
                日次・時間帯・店舗人数・振替店舗の一括設定
              </Typography>
            </div>

            {/* 期間・時間設定セクション（統合） */}
            <div className="form-section">
              <div className="section-title">
                <Icon sx={{ fontSize: 20 }}>schedule</Icon>
                <Typography variant="h6">実施期間・時間</Typography>
              </div>
              <Grid container spacing={2}>
                <Grid item xs={6} md={3}>
                  <TextField
                    label="開始日"
                    type="date"
                    value={startDate}
                    onChange={e => setStartDate(e.target.value)}
                    InputLabelProps={{ shrink: true }}
                    fullWidth
                    variant="outlined"
                    size="small"
                  />
                </Grid>
                <Grid item xs={6} md={3}>
                  <TextField
                    label="終了日"
                    type="date"
                    value={endDate}
                    onChange={e => setEndDate(e.target.value)}
                    InputLabelProps={{ shrink: true }}
                    fullWidth
                    variant="outlined"
                    size="small"
                  />
                </Grid>
                <Grid item xs={6} md={3}>
                  <TextField
                    label="開始時刻"
                    type="time"
                    value={startTime}
                    onChange={e => setStartTime(e.target.value)}
                    InputLabelProps={{ shrink: true }}
                    fullWidth
                    variant="outlined"
                    size="small"
                  />
                </Grid>
                <Grid item xs={6} md={3}>
                  <TextField
                    label="終了時刻"
                    type="time"
                    value={endTime}
                    onChange={e => setEndTime(e.target.value)}
                    InputLabelProps={{ shrink: true }}
                    fullWidth
                    variant="outlined"
                    size="small"
                  />
                </Grid>
              </Grid>
            </div>

            {/* 店舗情報セクション */}
            <div className="form-section">
              <div className="section-title">
                <Icon sx={{ fontSize: 20 }}>store</Icon>
                <Typography variant="h6">店舗情報</Typography>
              </div>
              
              {stores.map((s, idx) => (
                <div key={idx} className="compact-card">
                  <Typography variant="subtitle2" sx={{ mb: 1, color: '#1976d2', fontWeight: 'bold' }}>
                    店舗 {idx + 1}
                  </Typography>
                  <Grid container spacing={2}>
                    <Grid item xs={12} md={4}>
                      <TextField
                        label="店舗名"
                        value={s.name}
                        onChange={e => handleStoreChange(idx, 'name', e.target.value)}
                        fullWidth
                        variant="outlined"
                        size="small"
                        placeholder="例：新宿店"
                      />
                    </Grid>
                    <Grid item xs={6} md={2}>
                      <TextField
                        label="必要人数"
                        type="number"
                        inputProps={{ min: 1 }}
                        value={s.count}
                        onChange={e => handleStoreChange(idx, 'count', e.target.value)}
                        fullWidth
                        variant="outlined"
                        size="small"
                        placeholder="人"
                      />
                    </Grid>
                    <Grid item xs={6} md={6}>
                      <FormControl fullWidth variant="outlined" size="small">
                        <InputLabel>振替店舗</InputLabel>
                        <Select
                          value={s.transfer}
                          onChange={e => handleStoreChange(idx, 'transfer', e.target.value)}
                          label="振替店舗"
                        >
                          <MenuItem value="">
                            <em>選択してください</em>
                          </MenuItem>
                          {getTransferOptions(idx).map((opt, i) => (
                            <MenuItem key={i} value={opt}>{opt}</MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                    </Grid>
                  </Grid>
                </div>
              ))}
            </div>

            {/* 申込ボタンセクション */}
            <div className="form-section">
              <Button
                variant="contained"
                onClick={generateEntries}
                disabled={!canGenerate}
                size="medium"
                fullWidth
                sx={{ 
                  py: 1.5, 
                  fontSize: '1rem',
                  background: 'linear-gradient(135deg, #1976d2 0%, #1565c0 100%)',
                  '&:hover': {
                    background: 'linear-gradient(135deg, #1565c0 0%, #0d47a1 100%)',
                  }
                }}
              >
                <Icon sx={{ mr: 1, fontSize: 20 }}>send</Icon>
                スケジュールを生成する
              </Button>
              
              {!canGenerate && (
                <Typography variant="body2" color="text.secondary" sx={{ mt: 1, textAlign: 'center' }}>
                  すべての項目を入力してください
                </Typography>
              )}
            </div>
          </div>

          {/* 生成結果セクション */}
          {entries.length > 0 && (
            <Paper sx={{ mt: 2, overflow: 'hidden' }}>
              <div className="results-section">
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Icon sx={{ mr: 1, color: '#1976d2', fontSize: 20 }}>list_alt</Icon>
                  <Typography variant="h6" sx={{ color: '#1976d2', fontWeight: 'bold' }}>
                    生成結果 ({entries.length} 件)
                  </Typography>
                </Box>
                
                <List sx={{ maxHeight: '350px', overflow: 'auto', p: 0 }}>
                  {entries.map((e, i) => (
                    <ListItem key={i} sx={{ 
                      bgcolor: i % 2 === 0 ? 'transparent' : '#f0f0f0',
                      borderRadius: 1,
                      mb: 0.5,
                      py: 1
                    }}>
                      <Box sx={{ width: '100%' }}>
                        <Typography variant="body1" sx={{ fontWeight: 'bold', color: '#1976d2', mb: 0.5 }}>
                          {e.date} ({e.startTime}～{e.endTime})
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          店舗: {e.store} ｜ 人数: {e.count}名 ｜ 振替先: {e.transfer}
                        </Typography>
                      </Box>
                    </ListItem>
                  ))}
                </List>
              </div>
            </Paper>
          )}
        </Box>
      );
    }

    ReactDOM.render(<App />, document.getElementById('root'));
  </script>
</body>
</html>