// features/ActionPanel.js
// Ê§úÁ¥¢„Éú„Çø„É≥‰ªò„Åç / MUI Grid v1ÊñπÂºèÔºàxs/sm/mdÊåáÂÆöÔºâ
// - Ê§úÁ¥¢„Éú„ÉÉ„ÇØ„ÇπÂè≥„Å´„ÄåÊ§úÁ¥¢„Äç„Éú„Çø„É≥ËøΩÂä†
// - „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú / UMD‰∫íÊèõÔºàMaterialUI@5Ôºâ

window.ActionPanel = (function(){
  const { Paper, Grid, Button, TextField } = MaterialUI;

  function Panel(props){
    const {
      filterAction, setFilterAction,
      searchTerm, setSearchTerm,
      columnFilters, setColumnFilters,
      checkedRows, setCheckedRows,
      onClear,
      onSearch // üîç Ê§úÁ¥¢„Éú„Çø„É≥Êäº‰∏ãÊôÇ„ÅÆÂá¶ÁêÜ„ÇíÂ§ñÈÉ®„Åã„ÇâÊ∏°„Åõ„Çã„Çà„ÅÜ„Å´
    } = props;

    // „ÇØ„É™„Ç¢„Éú„Çø„É≥Âãï‰Ωú
    const handleClear = () => {
      if (typeof onClear === "function") {
        onClear();
        return;
      }
      setFilterAction?.("all");
      setSearchTerm?.("");
      setColumnFilters?.({});
      setCheckedRows?.(new Set());
    };

    // Ê§úÁ¥¢„Éú„Çø„É≥Âãï‰Ωú
    const handleSearch = () => {
      if (typeof onSearch === "function") {
        onSearch(searchTerm);
      } else {
        console.log("Ê§úÁ¥¢:", searchTerm);
      }
    };

    return (
      <Paper variant="outlined" sx={{ p: 1 }}>
        <Grid container spacing={1} alignItems="center">
          {/* --- „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥Áæ§ --- */}
          <Grid item xs={3} sm={2} md={2}>
            <Button
              fullWidth
              variant={filterAction === "all" ? "contained" : "outlined"}
              onClick={() => setFilterAction?.("all")}
            >
              „Åô„Åπ„Å¶
            </Button>
          </Grid>

          <Grid item xs={3} sm={2} md={1}>
            <Button
              fullWidth
              color="primary"
              variant={filterAction === "Áô∫Ê≥®" ? "contained" : "outlined"}
              onClick={() => setFilterAction?.("Áô∫Ê≥®")}
            >
              Áô∫Ê≥®
            </Button>
          </Grid>

          <Grid item xs={3} sm={2} md={1}>
            <Button
              fullWidth
              color="warning"
              variant={filterAction === "ÁßªÁÆ°" ? "contained" : "outlined"}
              onClick={() => setFilterAction?.("ÁßªÁÆ°")}
            >
              ÁßªÁÆ°
            </Button>
          </Grid>

          <Grid item xs={3} sm={2} md={1}>
            <Button
              fullWidth
              color="error"
              variant={filterAction === "ÂÄ§‰∏ã" ? "contained" : "outlined"}
              onClick={() => setFilterAction?.("ÂÄ§‰∏ã")}
            >
              ÂÄ§‰∏ã
            </Button>
          </Grid>

          {/* --- ÂàÜÈ°û„Éï„Ç£„É´„ÇøÁæ§ --- */}
          <Grid item xs={4} sm={2} md={1}>
            <TextField
              fullWidth
              size="small"
              label="ÈÉ®ÈñÄ"
              value={columnFilters?.dept || ""}
              onChange={(e) =>
                setColumnFilters?.((prev) => ({ ...prev, dept: e.target.value }))
              }
              placeholder="‰æãÔºâ70Ë°£Êñô"
            />
          </Grid>

          <Grid item xs={4} sm={2} md={1}>
            <TextField
              fullWidth
              size="small"
              label="„Ç≥„Éº„Éä„Éº"
              value={columnFilters?.corner || ""}
              onChange={(e) =>
                setColumnFilters?.((prev) => ({
                  ...prev,
                  corner: e.target.value,
                }))
              }
              placeholder="‰æãÔºâ070 „É¨„Éá„Ç£„Çπ"
            />
          </Grid>

          <Grid item xs={4} sm={2} md={1}>
            <TextField
              fullWidth
              size="small"
              label="„É©„Ç§„É≥"
              value={columnFilters?.line || ""}
              onChange={(e) =>
                setColumnFilters?.((prev) => ({
                  ...prev,
                  line: e.target.value,
                }))
              }
              placeholder="‰æãÔºâ001 „Éô„Éº„Ç∑„ÉÉ„ÇØ"
            />
          </Grid>

          <Grid item xs={4} sm={2} md={1}>
            <TextField
              fullWidth
              size="small"
              label="„Ç´„ÉÜ„Ç¥„É™"
              value={columnFilters?.category || ""}
              onChange={(e) =>
                setColumnFilters?.((prev) => ({
                  ...prev,
                  category: e.target.value,
                }))
              }
              placeholder="‰æãÔºâ0001 „Éà„ÉÉ„Éó„Çπ"
            />
          </Grid>

          <Grid item xs={4} sm={2} md={1}>
            <TextField
              fullWidth
              size="small"
              label="„Ç¢„Ç§„ÉÜ„É†"
              value={columnFilters?.item || ""}
              onChange={(e) =>
                setColumnFilters?.((prev) => ({
                  ...prev,
                  item: e.target.value,
                }))
              }
              placeholder="‰æãÔºâT„Ç∑„É£„ÉÑ"
            />
          </Grid>

          <Grid item xs={4} sm={2} md={1}>
            <TextField
              fullWidth
              size="small"
              label="SKU"
              value={columnFilters?.sku || ""}
              onChange={(e) =>
                setColumnFilters?.((prev) => ({
                  ...prev,
                  sku: e.target.value,
                }))
              }
              placeholder="‰æãÔºâ1234-5678-01"
            />
          </Grid>

          {/* --- Ê§úÁ¥¢„Ç®„É™„Ç¢Ôºà„ÉÜ„Ç≠„Çπ„Éà + „Éú„Çø„É≥Ôºâ --- */}
          <Grid item xs={8} sm={4} md={4}>
            <TextField
              fullWidth
              size="small"
              placeholder="ÂïÜÂìÅÊ§úÁ¥¢Ôºà„Ç≥„Éº„ÉâÔºèÂêçÁß∞Ôºâ"
              value={searchTerm || ""}
              onChange={(e) => setSearchTerm?.(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Enter") handleSearch();
              }}
            />
          </Grid>

          <Grid item xs={2} sm={2} md={1}>
            <Button
              fullWidth
              variant="contained"
              color="primary"
              onClick={handleSearch}
              sx={{ whiteSpace: "nowrap" }}
            >
              Ê§úÁ¥¢
            </Button>
          </Grid>

          {/* --- „ÇØ„É™„Ç¢„Éú„Çø„É≥ --- */}
          <Grid item xs={2} sm={2} md={1}>
            <Button fullWidth variant="outlined" onClick={handleClear}>
              „ÇØ„É™„Ç¢
            </Button>
          </Grid>
        </Grid>
      </Paper>
    );
  }

  return { Panel };
})();
